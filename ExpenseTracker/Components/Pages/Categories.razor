@page "/categories"
@using ExpenseTracker.Services;
@using ExpenseTracker.Data.Models;
@inject CategoryService Service;
@rendermode InteractiveServer
<h3>Categories</h3>
<ul>
    @if (categories == null)
    {
        <li>Loading...</li>
    }
    else
    {
        @foreach (var category in categories)
        {
            <li>
                @category.Name
                <button @onclick="() => DeleteCategory(category.Id)">Delete</button>
                
            </li>
        }
    }
</ul>

<h3>Add a New Category</h3>
<form @onsubmit="AddCategory">
    <input type="number" @bind="newCategoryId" placeholder="Category ID" />
    <input type="text" @bind="newCategoryName" placeholder="Category Name" />
    <button type="submit">Add</button>
</form>

@code {
    List<Category> categories ;
    private int newCategoryId;
    private string newCategoryName;
    private Category editCategory;
      private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        categories = await Service.GetCategoriesAsync();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategory = new Category { Id = newCategoryId, Name = newCategoryName };
            newCategory = await Service.AddCategoryAsync(newCategory);
            categories.Add(newCategory);

            newCategoryId = 0; // Clear the input field
            newCategoryName = string.Empty; // Clear the input field
        }
    }

    private async Task DeleteCategory(int id)
    {
        await Service.DeleteCategoryAsync(id);
        var category = categories.FirstOrDefault(c => c.Id == id);
        if (category != null)
        {
            categories.Remove(category);
        }
    }
}